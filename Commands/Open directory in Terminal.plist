<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby18 -wKU
require ENV['TM_SUPPORT_PATH'] + '/lib/escape.rb'

def find_directory
  files = [ ENV['TM_SELECTED_FILE'], ENV['TM_FILEPATH'], ENV['TM_DIRECTORY'], ENV['TM_PROJECT_DIRECTORY'], ENV['HOME'] ]
  res = files.find { |file| file &amp;&amp; File.exists?(file) }
  res &amp;&amp; File.file?(res) ? File.split(res).first : res
end

def is_running(process)
  all = `ps -U "$USER" -o ucomm`
  Array(all).find { |cmd| process == cmd.strip }
end

def terminal_script_new_window(dir)
  return &lt;&lt;-APPLESCRIPT
    tell application "Terminal"
      activate
      do script "cd #{e_as(e_sh(dir))}; clear; pwd"
    end tell
APPLESCRIPT
end

def terminal_script_new_tab(dir)
  return &lt;&lt;-APPLESCRIPT
  tell application "Terminal"
    activate
    set numberOfTabs to count tabs in window 1
    tell application "System Events"
      repeat while "Terminal" is not name of (process 1 where frontmost is true)
        delay 0.1
      end repeat
      tell process "Terminal" to keystroke "t" using command down
    end tell
    set startedAt to current date
    repeat while (count tabs in window 1) is numberOfTabs
      delay 0.1
      if (current date) - startedAt > 2 then
        error "Could not open new tab"
      end if
    end repeat
    do script "cd #{e_as(e_sh(dir))}; clear; pwd" in the last tab of window 1
  end tell
APPLESCRIPT
end

def iterm_legacy_script(dir)
  return &lt;&lt;-APPLESCRIPT
    tell application "iTerm"
      activate
      if exists the first terminal then
        set myterm to the first terminal
      else
        set myterm to (make new terminal)
      end if
      tell myterm
        activate current session
        launch session "Default Session"
        tell the last session
          write text "cd #{e_as(e_sh(dir))}; clear; pwd"
        end tell
      end tell
    end tell
APPLESCRIPT
end

def iterm_script(dir)
  return &lt;&lt;-APPLESCRIPT
    tell application "iTerm2"
      activate
      if exists the first window then
        set aWindow to the first window
      else
        set aWindow to (create window with default profile)
      end if
      tell aWindow
        set newTab to (create tab with default profile)
        tell newTab
          repeat with aSession in sessions
            tell aSession
              write text "cd #{e_as(e_sh(dir))}; clear; pwd"
            end tell
          end repeat
        end tell
      end tell
    end tell
APPLESCRIPT
end

if dir = find_directory
  script = nil
  if ENV['TM_TERMINAL'] =~ /^iterm$/i || is_running('iTerm2')
    script = iterm_script(dir)
  elsif is_running('iTerm')
    script = iterm_legacy_script(dir)
  else
    script = ENV['TM_TERMINAL_USE_TABS'] ? terminal_script_new_tab(dir) : terminal_script_new_window(dir)
  end
  open("|osascript", "w") { |io| io &lt;&lt; script }
end
</string>
	<key>input</key>
	<string>none</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>^O</string>
	<key>name</key>
	<string>Open Terminal</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>discard</string>
	<key>semanticClass</key>
	<string>callback.file-browser.action-menu</string>
	<key>uuid</key>
	<string>54CDB56E-85EA-11D9-B369-000A95E13C98</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
